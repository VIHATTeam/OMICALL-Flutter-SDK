/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/videoutils/ScalableVideoView.java:52: Warning: By convention, the custom view (ScalableVideoView) and the declare-styleable (scaleStyle) should have the same name (various editor features rely on this convention) [CustomViewStyleable]
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.scaleStyle, 0, 0);
                                                             ~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "CustomViewStyleable":
   The convention for custom views is to use a declare-styleable whose name
   matches the custom view class name. The IDE relies on this convention such
   that for example code completion can be offered for attributes in a custom
   view in layout XML resource files.

   (Similarly, layout parameter classes should use the suffix _Layout.)

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:906: Warning: Field requires API level 23 (current min is 21): android.media.AudioDeviceInfo#TYPE_WIRED_HEADPHONES [InlinedApi]
            result.find { it["type"] == TYPE_WIRED_HEADSET || it["type"] == TYPE_WIRED_HEADPHONES }
                                                                            ~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:906: Warning: Field requires API level 23 (current min is 21): android.media.AudioDeviceInfo#TYPE_WIRED_HEADSET [InlinedApi]
            result.find { it["type"] == TYPE_WIRED_HEADSET || it["type"] == TYPE_WIRED_HEADPHONES }
                                        ~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:907: Warning: Field requires API level 23 (current min is 21): android.media.AudioDeviceInfo#TYPE_BLUETOOTH_A2DP [InlinedApi]
        val bluetoothA2dp = result.find { it["type"] == TYPE_BLUETOOTH_A2DP }
                                                        ~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:908: Warning: Field requires API level 23 (current min is 21): android.media.AudioDeviceInfo#TYPE_BLUETOOTH_SCO [InlinedApi]
        val bluetoothSco = result.find { it["type"] == TYPE_BLUETOOTH_SCO }
                                                       ~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:915: Warning: Field requires API level 23 (current min is 21): android.media.AudioDeviceInfo#TYPE_BUILTIN_EARPIECE [InlinedApi]
                    "type" to TYPE_BUILTIN_EARPIECE,
                              ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "InlinedApi":
   This check scans through all the Android API field references in the
   application and flags certain constants, such as static final integers and
   Strings, which were introduced in later versions. These will actually be
   copied into the class files rather than being referenced, which means that
   the value is available even when running on older devices. In some cases
   that's fine, and in other cases it can result in a runtime crash or
   incorrect behavior. It depends on the context, so consider the code
   carefully and decide whether it's safe and can be suppressed or whether the
   code needs to be guarded.

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/utils/FirebaseUtils.kt:33: Warning: Do not use @NonNull in Kotlin; the nullability is already implied by the Kotlin type Task<String?> not ending with ? [KotlinNullnessAnnotation]
                override fun onComplete(@NonNull task: Task<String?>) {
                                        ~~~~~~~~

   Explanation for issues of type "KotlinNullnessAnnotation":
   In Kotlin, nullness is part of the type system; s: String is never null and
   s: String? is sometimes null, whether or not you add in additional
   annotations stating @NonNull or @Nullable. These are likely copy/paste
   mistakes, and are misleading.

/Users/vihat/hotfix/OmiSDK/build.gradle:15: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 33
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_accept.xml:5: Warning: Attribute width is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:width="64dp"
        ~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_accept.xml:6: Warning: Attribute height is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:height="64dp">
        ~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_accept.xml:13: Warning: Attribute width is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:width="32dp"
        ~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_accept.xml:14: Warning: Attribute height is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:height="32dp"
        ~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_decline.xml:5: Warning: Attribute width is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:width="64dp"
        ~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_decline.xml:6: Warning: Attribute height is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:height="64dp">
        ~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_decline.xml:13: Warning: Attribute width is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:width="32dp"
        ~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_decline.xml:14: Warning: Attribute height is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:height="32dp"
        ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedAttribute":
   This check finds attributes set in XML files that were introduced in a
   version newer than the oldest version targeted by your application (with
   the minSdkVersion attribute).

   This is not an error; the application will simply ignore the attribute.
   However, if the attribute is important to the appearance or functionality
   of your application, you should consider finding an alternative way to
   achieve the same result with only available attributes, and then you can
   optionally create a copy of the layout in a layout-vNN folder which will be
   used on API NN or higher where you can take advantage of the newer
   attribute.

   Note: This check does not only apply to attributes. For example, some tags
   can be unused too, such as the new <tag> element in layouts introduced in
   API 21.

/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_call_status_inbound.xml:7: Warning: Resource references will not work correctly in images generated for this vector icon for API < 24; check generated icon to make sure it looks acceptable [VectorRaster]
        android:fillColor="@color/primary"
                           ~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_call_status_local.xml:7: Warning: Resource references will not work correctly in images generated for this vector icon for API < 24; check generated icon to make sure it looks acceptable [VectorRaster]
        android:fillColor="@color/primary"
                           ~~~~~~~~~~~~~~

   Explanation for issues of type "VectorRaster":
   Vector icons require API 21 or API 24 depending on used features, but when
   minSdkVersion is less than 21 or 24 and Android Gradle plugin 1.4 or higher
   is used, a vector drawable placed in the drawable folder is automatically
   moved to drawable-anydpi-v21 or drawable-anydpi-v24 and bitmap images are
   generated for different screen resolutions for backwards compatibility.

   However, there are some limitations to this raster image generation, and
   this lint check flags elements and attributes that are not fully supported.
   You should manually check whether the generated output is acceptable for
   those older devices.

/Users/vihat/hotfix/OmiSDK/build.gradle:76: Warning: A newer version of androidx.lifecycle:lifecycle-process than 2.6.1 is available: 2.6.2 [GradleDependency]
    implementation "androidx.lifecycle:lifecycle-process:2.6.1"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/receiver/FirebaseMessageReceiver.kt:174: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
            context.resources.getIdentifier(
                              ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/receiver/FirebaseMessageReceiver.kt:231: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
        val resourceId = resources.getIdentifier("${context.packageName}:drawable/$remoteDefaultAvatar", null, null)
                                   ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/receiver/FirebaseMessageReceiver.kt:254: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
        else resources.getIdentifier("${context.packageName}:drawable/${declineImage}", null, null)
                       ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/receiver/FirebaseMessageReceiver.kt:256: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
        else resources.getIdentifier("${context.packageName}:drawable/${acceptImage}", null, null)
                       ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/IncomingCallActivity.kt:81: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
            val btnEndCallImage = resources.getIdentifier("${packageName}:drawable/$buttonDecline", null, null)
                                            ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/IncomingCallActivity.kt:86: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
            val btnAcceptCallImage = resources.getIdentifier("${packageName}:drawable/$buttonAccept", null, null)
                                               ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/IncomingCallActivity.kt:110: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
            val defaultUserImage = resources.getIdentifier("${packageName}:drawable/$defaultAvatar", null, null)
                                             ~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/service/NotificationService.kt:156: Warning: Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. R.foo.bar) than by name (e.g. getIdentifier("bar", "foo", null)). [DiscouragedApi]
            context.resources.getIdentifier(
                              ~~~~~~~~~~~~~

   Explanation for issues of type "DiscouragedApi":
   Discouraged APIs are allowed and are not deprecated, but they may be unfit
   for common use (e.g. due to slow performance or subtle behavior).

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:322: Warning: Using getString to get device identifiers is not recommended [HardwareIds]
            Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:346: Warning: Using getString to get device identifiers is not recommended [HardwareIds]
            Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardwareIds":
   Using these device identifiers is not recommended other than for high value
   fraud prevention and advanced telephony use-cases. For advertising
   use-cases, use AdvertisingIdClient$Info#getId and for analytics, use
   InstanceId#getId.

   https://developer.android.com/training/articles/user-data-ids.html

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/service/NotificationBackgroundService.kt:46: Warning: Provide a timeout when requesting a wakelock with PowerManager.Wakelock.acquire(long timeout). This will ensure the OS will cleanup any wakelocks that last longer than you intend, and will save your user's battery. [WakelockTimeout]
        mWakeLock?.acquire()
        ~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "WakelockTimeout":
   Wakelocks have two acquire methods: one with a timeout, and one without.
   You should generally always use the one with a timeout. A typical timeout
   is 10 minutes. If the task takes longer than it is critical that it happens
   (i.e. can't use JobScheduler) then maybe they should consider a foreground
   service instead (which is a stronger run guarantee and lets the user know
   something long/important is happening).

/Users/vihat/hotfix/OmiSDK/src/main/res/layout/notification_incoming_call.xml:19: Warning: Invalid layout param in a LinearLayout: layout_centerVertical [ObsoleteLayoutParam]
        android:layout_centerVertical="true"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteLayoutParam":
   The given layout_param is not defined for the given layout, meaning it has
   no effect. This usually happens when you change the parent layout or move
   view code around without updating the layout params. This will cause
   useless attribute processing at runtime, and is misleading for others
   reading the layout so the parameter should be removed.

/Users/vihat/hotfix/OmiSDK/src/main/java/vn/vihat/omicall/omisdk/OmiClient.kt:1091: Warning: Do not place Android context classes in static fields (static reference to OmiClient which has field context pointing to Context); this is a memory leak [StaticFieldLeak]
        var instance: OmiClient? = null
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "StaticFieldLeak":
   A static field will leak contexts.

   Non-static inner classes have an implicit reference to their outer class.
   If that outer class is for example a Fragment or Activity, then this
   reference means that the long-running handler/loader/task will hold a
   reference to the activity which prevents it from getting garbage
   collected.

   Similarly, direct field references to activities and fragments from these
   longer running instances can cause leaks.

   ViewModel classes should never point to Views or non-application Contexts.

/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_call_status_inbound.xml:9: Warning: Very long vector path (932 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector. [VectorPath]
        android:pathData="M116.35,14.28c-1.4,0.04 -2.72,0.62 -3.7,1.62l-21.5,21.5c-2.1,2.1 -2.1,5.5 0,7.6l21.5,21.5c1.35,1.4 3.35,1.97 5.23,1.48c1.88,-0.49 3.35,-1.96 3.85,-3.85c0.49,-1.88 -0.07,-3.89 -1.48,-5.23l-12.32,-12.32h40.77c1.94,0.03 3.74,-0.99 4.72,-2.67c0.98,-1.67 0.98,-3.75 0,-5.42c-0.98,-1.67 -2.78,-2.69 -4.72,-2.67h-40.77l12.32,-12.32c1.59,-1.55 2.06,-3.91 1.2,-5.95c-0.86,-2.04 -2.89,-3.34 -5.1,-3.28zM48,14.38c-1.79,-0.14 -3.63,0.06 -5.44,0.64l-7.71,2.47c-7.65,2.44 -13.51,8.99 -15.4,17.22c-4.5,19.56 0.9,43.37 16.17,71.43c15.27,28.03 31.99,44.88 50.19,50.55c7.71,2.4 16.04,0.28 21.88,-5.57l5.86,-5.89c5.47,-5.49 6.26,-14.42 1.85,-20.9l-8.83,-12.98c-3.79,-5.57 -10.52,-7.93 -16.71,-5.87l-13.42,4.48c-1.79,0.6 -3.8,0.28 -5.25,-0.93c-5.46,-4.59 -10.1,-10.16 -13.91,-16.71c-3.81,-6.56 -6.27,-13.21 -7.38,-19.95c-0.29,-1.76 0.38,-3.55 1.68,-4.78l11.51,-10.92c4.88,-4.63 6.37,-12.07 3.68,-18.41l-6.16,-14.53c-2.32,-5.48 -7.24,-8.95 -12.61,-9.36z"
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_call_status_local.xml:9: Warning: Very long vector path (1509 characters), which is bad for performance. Considering reducing precision, removing minor details or rasterizing vector. [VectorPath]
        android:pathData="M48.38,21.5c-10.87,0 -19.71,8.84 -19.71,19.71c0,10.86 8.84,19.71 19.71,19.71c10.87,0 19.71,-8.84 19.71,-19.71c0,-10.87 -8.84,-19.71 -19.71,-19.71zM123.63,21.5c-10.87,0 -19.71,8.84 -19.71,19.71c0,10.86 8.84,19.71 19.71,19.71c10.87,0 19.71,-8.84 19.71,-19.71c0,-10.87 -8.84,-19.71 -19.71,-19.71zM26.08,71.67c-6.48,0 -11.74,5.17 -11.74,11.61v0.79c0,5.22 2.15,10.24 5.91,13.77c4.71,4.41 13.41,9.67 28.13,9.67c14.72,0 23.42,-5.25 28.13,-9.67c3.76,-3.53 5.91,-8.54 5.91,-13.77v-0.79c0,-6.44 -5.27,-11.61 -11.74,-11.61zM101.33,71.67c-6.48,0 -11.74,5.17 -11.74,11.61v0.79c0,5.22 2.15,10.24 5.91,13.77c4.71,4.41 13.41,9.67 28.13,9.67c14.72,0 23.42,-5.25 28.13,-9.67c3.76,-3.53 5.91,-8.54 5.91,-13.77v-0.79c0,-6.44 -5.27,-11.61 -11.74,-11.61zM134.32,114.61c-2.19,0 -4.16,1.33 -4.98,3.36c-0.82,2.03 -0.33,4.35 1.24,5.88l5.16,5.16h-33.61c-1.94,-0.03 -3.74,0.99 -4.72,2.67c-0.98,1.67 -0.98,3.75 0,5.42c0.98,1.67 2.78,2.69 4.72,2.67h33.61l-5.16,5.16c-1.4,1.35 -1.97,3.35 -1.48,5.23c0.49,1.88 1.96,3.35 3.85,3.85c1.88,0.49 3.89,-0.07 5.23,-1.48l14.33,-14.33c2.1,-2.1 2.1,-5.5 0,-7.6l-14.33,-14.33c-1.01,-1.04 -2.4,-1.63 -3.86,-1.63zM37.52,114.62c-1.4,0.04 -2.72,0.62 -3.7,1.62l-14.33,14.33c-2.1,2.1 -2.1,5.5 0,7.6l14.33,14.33c1.35,1.4 3.35,1.97 5.23,1.48c1.88,-0.49 3.35,-1.96 3.85,-3.85c0.49,-1.88 -0.07,-3.89 -1.48,-5.23l-5.16,-5.16h33.61c1.94,0.03 3.74,-0.99 4.72,-2.67c0.98,-1.67 0.98,-3.75 0,-5.42c-0.98,-1.67 -2.78,-2.69 -4.72,-2.67h-33.61l5.16,-5.16c1.59,-1.55 2.06,-3.91 1.2,-5.95c-0.86,-2.04 -2.89,-3.34 -5.1,-3.28z"
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "VectorPath":
   Using long vector paths is bad for performance. There are several ways to
   make the pathData shorter:
   * Using less precision
   * Removing some minor details
   * Using the Android Studio vector conversion tool
   * Rasterizing the image (converting to PNG)

/Users/vihat/hotfix/OmiSDK/src/main/res/layout/incoming_call_activity.xml:8: Warning: Possible overdraw: Root element paints background @color/primary with a theme that also paints a background (inferred theme is @style/Theme_Design_NoActionBar) [Overdraw]
    android:background="@color/primary"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:6: Warning: The resource R.color.purple_200 appears to be unused [UnusedResources]
    <color name="purple_200">#FFBB86FC</color>
           ~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:7: Warning: The resource R.color.purple_500 appears to be unused [UnusedResources]
    <color name="purple_500">#FF6200EE</color>
           ~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:8: Warning: The resource R.color.purple_700 appears to be unused [UnusedResources]
    <color name="purple_700">#FF3700B3</color>
           ~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:9: Warning: The resource R.color.teal_200 appears to be unused [UnusedResources]
    <color name="teal_200">#FF03DAC5</color>
           ~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:10: Warning: The resource R.color.teal_700 appears to be unused [UnusedResources]
    <color name="teal_700">#FF018786</color>
           ~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:13: Warning: The resource R.color.voice_main_color appears to be unused [UnusedResources]
    <color name="voice_main_color">#1e3150</color>
           ~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:14: Warning: The resource R.color.voice_main_color_50 appears to be unused [UnusedResources]
    <color name="voice_main_color_50">#801e3150</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:15: Warning: The resource R.color.voice_red appears to be unused [UnusedResources]
    <color name="voice_red">#ff5955</color>
           ~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:16: Warning: The resource R.color.voice_text_in_call appears to be unused [UnusedResources]
    <color name="voice_text_in_call">#80FFFFFF</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:17: Warning: The resource R.color.voice_main_text_color appears to be unused [UnusedResources]
    <color name="voice_main_text_color">#1e3150</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:18: Warning: The resource R.color.voice_main_text_color_50 appears to be unused [UnusedResources]
    <color name="voice_main_text_color_50">#801e3150</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:20: Warning: The resource R.color.background appears to be unused [UnusedResources]
    <color name="background">#FFFFFFFF</color>
           ~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/colors.xml:21: Warning: The resource R.color.info appears to be unused [UnusedResources]
    <color name="info">#FF00B1FF</color>
           ~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/dimens.xml:3: Warning: The resource R.dimen.margin_keyboard appears to be unused [UnusedResources]
    <dimen name="margin_keyboard">32dip</dimen>
           ~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/font/font.xml:2: Warning: The resource R.font.font appears to be unused [UnusedResources]
<font-family xmlns:app="http://schemas.android.com/apk/res-auto">
^
/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_close.png: Warning: The resource R.drawable.ic_inbound_btn_close appears to be unused [UnusedResources]
/Users/vihat/hotfix/OmiSDK/src/main/res/values/styles.xml:4: Warning: The resource R.style.CallkitIncomingTheme appears to be unused [UnusedResources]
    <style name="CallkitIncomingTheme" parent="@style/Theme.AppCompat">
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/values/themes.xml:2: Warning: The resource R.style.Theme_Omi_Transparent appears to be unused [UnusedResources]
    <style name="Theme.Omi.Transparent" parent="Theme.MaterialComponents.NoActionBar">
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/Users/vihat/hotfix/OmiSDK/src/main/res/drawable/ic_inbound_btn_close.png: Warning: Found bitmap drawable res/drawable/ic_inbound_btn_close.png in densityless folder [IconLocation]

   Explanation for issues of type "IconLocation":
   The res/drawable folder is intended for density-independent graphics such
   as shapes defined in XML. For bitmaps, move it to drawable-mdpi and
   consider providing higher and lower resolution versions in drawable-ldpi,
   drawable-hdpi and drawable-xhdpi. If the icon really is density independent
   (for example a solid color) you can place it in drawable-nodpi.

   https://developer.android.com/guide/practices/screens_support.html

/Users/vihat/hotfix/OmiSDK/src/main/res/layout/notification_incoming_call.xml:9: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/layout/notification_incoming_call.xml:46: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageButton
     ~~~~~~~~~~~
/Users/vihat/hotfix/OmiSDK/src/main/res/layout/notification_incoming_call.xml:55: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageButton
     ~~~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, just suppress the lint
   warning with a tools:ignore="ContentDescription" attribute.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

/Users/vihat/hotfix/OmiSDK/src/main/AndroidManifest.xml: Warning: The project references RTL attributes, but does not explicitly enable or disable RTL support with android:supportsRtl in the manifest [RtlEnabled]

   Explanation for issues of type "RtlEnabled":
   To enable right-to-left support, when running on API 17 and higher, you
   must set the android:supportsRtl attribute in the manifest <application>
   element.

   If you have started adding RTL attributes, but have not yet finished the
   migration, you can set the attribute to false to satisfy this lint check.

0 errors, 58 warnings
